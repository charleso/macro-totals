<project name="EllipseJ" default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">

	<import file="macros.xml" />
	<property name="ji_jai.root.dir" value="../.." />
	<import file="../../antCommonImpl/AntCommonScripts/ivy-common.xml" />
	<property name="trace.level" value="0" />
	<property name="batch.range" value="1000" />
	<property name="ellipsej.threads" value="1" />
	<property name="ellipsej.parallel" value="false" />
	<property name="ellipsej.batch" value="true" />
	<property name="ellipsej.conversion" value="false" />
	<property name="ellipsej.include" value="0,1,2,3,4,5,6,7,8,9,x" />
	<property name="ellipsej.check" value="false" />
	<property name="ellipsej.fail" value="false" />
	<property name="naca.reduce" value="false" />

	<property name="workspace" value="${basedir}" />
	<property name="src" value="${workspace}/src" />
	<property name="bin" value="${workspace}/bin" />
	<property name="dist" value="${workspace}/dist" />
	<property name="xmloutput" value="${workspace}/xml" />
	<property name="build" value="${workspace}/build" />
	<property name="rdl.temp" value="${workspace}/rdl" />
	<property name="copylib" value="${workspace}/copylib" />
	<property name="copymsm" value="${xmloutput}/copymsm/tux" />
	<property name="lib.dir" value="${workspace}/lib" />
	<property name="dumpload" value="${workspace}/dumpload" />
	<property name="db_macro" value="${workspace}/db_macro" />
	<property name="datdct" value="${workspace}/datdct" />
	<property name="fail" value="${workspace}/fail" />
	<property name="check" value="${workspace}/check" />
	<property name="props.dir" value="${workspace}/job.build.scratch/workspace/RIAXML" />

	<property name="ellipse-name" value="ellipse" />
	<property name="ellipsej-xml.jar" value="ellipsej-xml.jar" />

	<property name="build.root" value="${basedir}" />
	<property name="ScrngenXML" value="${build.root}/../ScrngenXML" />
	<property name="Tools" value="${build.root}/../BuildTools" />

	<property name="base" value="${basedir}" />
	<property name="ellipse" value="${base}" />
	<property name="pcom" value="pcom" />
	<property name="macro" value="${base}/macro" />
	<property name="momgen" value="${base}/momgen" />
	<property name="copyfile" value="${base}/copyfile" />
	<property name="gen.copyfile" value="${workspace}/copyfile" />
	<property name="copyins" value="${base}/copyins" />
	<property name="cobol.src" value="${base}/src" />
	<property name="xml" value="${base}/xml" />
	<property name="rdl.dir" value="${base}/rdl" />

	<property name="rdl.fileset" value="rdl.subset" />
	<property name="cobol.fileset" value="ellipse.all" />
	<property name="javac.memory" value="1024m" />
	<property name="cc.comment" value="Automated checkin" />
	<property name="antCommon" value="${build.root}/../../antCommonImpl" />

	<property name="dictionary.override" value="${ellipse}" />
    <property name="build.source" value="uml"/>

	<property name="lib.emma.dir.abs2" value="${antCommon}/AntCommonScripts/lib" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${lib.emma.dir.abs2}/ant-contrib/ant-contrib.jar" />
		</classpath>
	</taskdef>
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
		<classpath>
			<pathelement location="${lib.emma.dir.abs2}/ant-contrib/ant-contrib.jar" />
		</classpath>
	</taskdef>
	<taskdef resource="tools.properties">
		<classpath>
			<pathelement location="lib/tools.jar" />
		</classpath>
	</taskdef>

	<patternset id="ellipse.all">
		<include name="mss*.cbl" />
		<include name="mso*.cbl" />
		<include name="msk*.cbl" />
		<patternset refid="ignored.subroutines" />
	</patternset>

	<patternset id="ellipse.batch">
		<include name="*.cbl" />
		<exclude name="msbpip.cbl" />
		<exclude name="mss*.cbl" />
		<exclude name="mso*.cbl" />
		<exclude name="msk*.cbl" />
		<exclude name="msc*.cbl" />
		<exclude name="dd*.cbl" />
		<exclude name="msb83i.cbl" />
		<exclude name="msi838.cbl" />
	</patternset>

	<patternset id="ellipse.conversion">
		<include name="msc*.cbl" />
	</patternset>

	<fileset dir="${rdl.dir}" id="rdl.subset">
		<include name="**/*.rdl" />
	</fileset>

	<fileset dir="${rdl.dir}" id="rdl.0.subset">
		<include name="**/*0??.rdl" />
	</fileset>

	<fileset dir="${rdl.dir}" id="rdl.1.subset">
		<include name="**/*1??.rdl" />
	</fileset>

	<fileset dir="${rdl.dir}" id="rdl.2.subset">
		<include name="**/*2??.rdl" />
	</fileset>

	<fileset dir="${rdl.dir}" id="rdl.3.subset">
		<include name="**/*3??.rdl" />
	</fileset>

	<fileset dir="${rdl.dir}" id="rdl.4.subset">
		<include name="**/*4??.rdl" />
	</fileset>

	<fileset dir="${rdl.dir}" id="rdl.5.subset">
		<include name="**/*5??.rdl" />
	</fileset>

	<fileset dir="${rdl.dir}" id="rdl.6.subset">
		<include name="**/*6??.rdl" />
	</fileset>

	<fileset dir="${rdl.dir}" id="rdl.7.subset">
		<include name="**/*7??.rdl" />
	</fileset>

	<fileset dir="${rdl.dir}" id="rdl.8.subset">
		<include name="**/*8??.rdl" />
	</fileset>

	<fileset dir="${rdl.dir}" id="rdl.9.subset">
		<include name="**/*9??.rdl" />
	</fileset>

	<fileset dir="${rdl.dir}" id="rdl.x.subset">
		<exclude name="**/*0??.rdl" />
		<exclude name="**/*1??.rdl" />
		<exclude name="**/*2??.rdl" />
		<exclude name="**/*3??.rdl" />
		<exclude name="**/*4??.rdl" />
		<exclude name="**/*5??.rdl" />
		<exclude name="**/*6??.rdl" />
		<exclude name="**/*7??.rdl" />
		<exclude name="**/*8??.rdl" />
		<exclude name="**/*9??.rdl" />
		<include name="**/*.rdl" />
	</fileset>

	<fileset dir="${gen.copyfile}" id="dumpload.fileset">
		<include name="**/msf*.ddf" />
		<exclude name="**/msf*pd.ddf" />
	</fileset>
	
	<target name="all.init">
		<delete dir="${dist}" />
		<delete file="${check}" />
		<delete file="${fail}" />
		<mkdir dir="${dist}" />
		<antcall target="tools" />
		<antcall target="scrngen" />
		<antcall target="jarxml" />
		
		<if>
			<equals arg1="${ivy.cache}" arg2="$${env.WORKSPACE}/ivy.cache"/>
			<then>
				<propertyregex property="ivy.cache" input="${basedir}/../../../ivy.cache" 
						regexp="(.*)" select="\0" override="true"/>
				<echo message="~ Lost Hudson environment variable detected ~"/>
				<echo message="$${ivy.cache} = ${ivy.cache}"/>
			</then>
		</if>
		<ivy:settings file="${ivy.settings}" />
		
		<ivy:retrieve organisation="mincom" module="MincomNacaTrans" revision="${infrastructure.version}" inline="true" pattern="${lib.dir}/[artifact].[type]" />
		<ivy:retrieve organisation="mincom" module="ejp" revision="${infrastructure.version}" inline="true" pattern="${lib.dir}/[artifact].[type]" conf="default,j2ee" />
		
		<!-- generate index for generated dictionary -->
		<ddix.2 dir="${datdct}" />
		<antcall target="genaudit"/>
		
		<if>
			<equals arg1="${ellipsej.parallel}" arg2="false" />
			<then>
				<property name="ellipsej.process.thread" value="1" />
			</then>	
			<else>
				<property name="ellipsej.process.thread" value="3" />
			</else>
		</if>
		
		<parallel threadCount="${ellipsej.process.thread}">
			<antcall target="dist.init">
				<param name="ellipse-name" value="ellipsej-online" />
				<param name="cobol.fileset" value="ellipse.all" />
				<param name="src" value="${workspace}/online/src" />
				<param name="bin" value="${workspace}/online/bin" />
				<param name="build" value="${workspace}/online/build" />
				<param name="copylib" value="${workspace}/online/copylib" />
			</antcall>
			
			<antcall target="dist.init">
				<param name="ellipse-name" value="ellipsej-batch" />
				<param name="cobol.fileset" value="ellipse.batch" />
				<param name="batch" value="true" />
				<param name="src" value="${workspace}/batch/src" />
				<param name="bin" value="${workspace}/batch/bin" />
				<param name="build" value="${workspace}/batch/build" />
				<param name="copylib" value="${workspace}/batch/copylib" />
			</antcall>
			
			<if><equals arg1="${ellipsej.conversion}" arg2="true"/><then>
			<antcall target="dist.init">
				<param name="ellipse-name" value="ellipsej-conversion" />
				<param name="cobol.fileset" value="ellipse.conversion" />
				<param name="src" value="${workspace}/conversion/src" />
				<param name="bin" value="${workspace}/conversion/bin" />
				<param name="build" value="${workspace}/conversion/build" />
				<param name="copylib" value="${workspace}/conversion/copylib" />
			</antcall>
			</then></if>
		</parallel>
	</target>
	<target name="all">
		<if>
			<equals arg1="${ellipsej.parallel}" arg2="false" />
			<then>
				<property name="ellipsej.process.thread" value="1" />
			</then>	
			<else>
				<property name="ellipsej.process.thread" value="3" />
			</else>
		</if>
		
		<parallel threadCount="${ellipsej.process.thread}">
			<antcall target="dist">
				<param name="ellipse-name" value="ellipsej-online" />
				<param name="cobol.fileset" value="ellipse.all" />
				<param name="src" value="${workspace}/online/src" />
				<param name="bin" value="${workspace}/online/bin" />
				<param name="build" value="${workspace}/online/build" />
				<param name="copylib" value="${workspace}/online/copylib" />
			</antcall>
			
			<antcall target="dist">
				<param name="ellipse-name" value="ellipsej-batch" />
				<param name="cobol.fileset" value="ellipse.batch" />
				<param name="batch" value="true" />
				<param name="src" value="${workspace}/batch/src" />
				<param name="bin" value="${workspace}/batch/bin" />
				<param name="build" value="${workspace}/batch/build" />
				<param name="copylib" value="${workspace}/batch/copylib" />
			</antcall>
			
			<if><equals arg1="${ellipsej.conversion}" arg2="true"/><then>
			<antcall target="dist">
				<param name="ellipse-name" value="ellipsej-conversion" />
				<param name="cobol.fileset" value="ellipse.conversion" />
				<param name="src" value="${workspace}/conversion/src" />
				<param name="bin" value="${workspace}/conversion/bin" />
				<param name="build" value="${workspace}/conversion/build" />
				<param name="copylib" value="${workspace}/conversion/copylib" />
			</antcall>
			</then></if>
		</parallel>

		<antcall target="check.fail" />
	</target>

	<target name="check.fail">
		<available file="${fail}" property="failed"></available>
		<loadfile property="failed.apps" srcfile="${fail}" failonerror="false" />
		<echo message="************** FAILED APPS ****************" />
		<echo message="${failed.apps}" />
		<echo message="*******************************************" />
		<if>
			<equals arg1="${ellipsej.fail}" arg2="true" />
			<then><fail if="failed" message="One or more programs couldn't be compiled" /></then>
		</if>
	</target>

	<target name="gendd">
		<if>
			<equals arg1="${build.source}" arg2="addict"/>
			<then>
				<ddix dir="${datdct}"/>
				<gendd dir="${workspace}" datdct="${datdct}"/>
			</then>
			<else>
				<gendnl datnl="${workspace}/all.datnl" ellipse="${workspace}"/>
			</else>
		</if>
		
		<antcall target="defdd"/>
	</target>
	
	<target name="defdd">
		<defdd dir="${workspace}"/>
	</target>
	
	<target name="genaudit">
		<loadfile property="all.datnl.property" srcfile="${workspace}/all.datnl"/>
		
		<delete dir="${workspace}/genaudit"/>
		<mkdir dir="${workspace}/genaudit"/>
		
		<!-- this may be an issue for Windows -->
		<propertyregex property="all.datnl.list" input="${all.datnl.property}" regexp="\n" replace=","/>
		<for list="${all.datnl.list}" param="all.datnl.element">
			<sequential>
				<genaudit dir="${workspace}/genaudit" file="@{all.datnl.element}" datdct="${datdct}"/>
			</sequential>
		</for>
	</target>
	
	<target name="dist.init">
		<antcall target="init" />
		<antcall target="rdl-all" />
		<antcall target="dumpload-all" />
		
		<stopwatch name="pcom-all" />
		<antcall target="pcom-all" />
		<stopwatch name="pcom-all" action="total" />
		
		<stopwatch name="copyprops" />
		<copyprops/>
		<stopwatch name="copyprops" action="total" />
	</target>
	<target name="dist">	
		<antcall target="exit.remover" />
		<stopwatch name="naca" />
		<antcall target="naca" />
		<stopwatch name="naca" action="total" />
			
		<stopwatch name="javac" />
		<antcall target="javac" />
		<stopwatch name="javac" action="total" />
		
		<jarzip name="${ellipse-name}" src="${src}" bin="${bin}" />
	</target>
	<target name="init">
		<delete dir="${build}" />
		<mkdir dir="${build}" />
		<delete dir="${copylib}" />
		<mkdir dir="${copylib}" />
		<delete dir="${src}" />
		<mkdir dir="${src}" />
		<delete dir="${bin}" />
		<mkdir dir="${bin}" />
	</target>
	<macrodef name="copyprops">
		<sequential>
			<mkdir dir="${props.dir}" />
			<move todir="${props.dir}" flatten="true">
				<fileset dir="${build}">
					<include name="**/*.properties"/>
				</fileset>
			</move>
		</sequential>
	</macrodef>
	<macrodef name="jarzip">
		<attribute name="name" />
		<attribute name="src" />
		<attribute name="bin" />
		<sequential>
			<property name="jar" value="@{name}.jar" />
			<property name="src.zip" value="@{name}-src.zip" />
			
			<safe.copy file="${dist}/${jar}" >
			<jar destfile="${dist}/${jar}.bak" update="true" basedir="@{bin}" />
			</safe.copy>
			<delete dir="@{bin}" />
			<safe.copy file="${dist}/${src.zip}" >
			<zip destfile="${dist}/${src.zip}.bak" update="true" >
				<zipfileset dir="@{src}" />
			</zip>
			</safe.copy>
			<delete dir="@{src}" />
		</sequential>
	</macrodef>
	<macrodef name="safe.copy">
		<attribute name="file" />
		<element name="args" implicit="yes" />
		<sequential>
			<copy file="@{file}" tofile="@{file}.bak" failonerror="false" />
			<args />
			<move file="@{file}.bak" tofile="@{file}" failonerror="false"/>
		</sequential>
	</macrodef>
	<target name="pcom-all" unless="skip.pcom">
		<parallel threadcount="${ellipsej.threads}">
			<pcom.macro hash="0" />
			<pcom.macro hash="1" />
			<pcom.macro hash="2" />
			<pcom.macro hash="3" />
			<pcom.macro hash="4" />
			<pcom.macro hash="5" />
			<pcom.macro hash="6" />
			<pcom.macro hash="7" />
			<pcom.macro hash="8" />
			<pcom.macro hash="9" />
			<pcom.macro hash="x" />
		</parallel>
		<move todir="${copylib}" flatten="true">
			<fileset dir="${build}">
				<include name="**/*.cpy" />
			</fileset>
		</move>
		<move todir="${build}/x" flatten="true">
			<fileset dir="${build}" includes="**/*.cob" excludes="0/*,1/*,2/*,3/*,4/*,5/*,6/*,7/*,8/*,9/*" />
		</move>
		<delete includeemptydirs="true">
			<fileset dir="${build}" includes="*" excludes="0,1,2,3,4,5,6,7,8,9,x" />
		</delete>
	</target>
	<macrodef name="pcom.macro">
		<attribute name="hash" />
		<sequential>
			<!-- Allow hash folders to be skipped by external property -->
			<propertyregex property="contains@{hash}" input="${ellipsej.include}" regexp=".*?(@{hash}).*?" select="\1" />
			<if>
				<and>
					<equals arg1="${contains@{hash}}" arg2="@{hash}" />
					<available file="${cobol.src}/@{hash}" />
				</and>
				<then>
					<foreach target="pcom" param="appfile">
						<fileset dir="${cobol.src}/@{hash}" >
							<patternset refid="${cobol.fileset}" />
						</fileset>
					</foreach>
				</then>
				<else>
					<echo message="Skipping hash folder '@{hash}'" />
				</else>
			</if>
		</sequential>
	</macrodef>
	<target name="pcom">
		<basename property="apptmp" file="${appfile}" />
		<propertyregex property="app" input="${apptmp}" regexp="(.*?)\.cbl" replace="\1" />
		<propertyregex property="hash" input="${app}" regexp="...(.).*?" select="\1" />
		<echo message="Compiling ${app}" />
		<!-- NOTE: Order IS important for pcom -->
		<property name="folder" value="${build}/${hash}" />
		<delete file="${folder}/${app}.cob" />
		<trycatch>
		<try>
		<mkdir dir="${folder}" />
		<pcom2 mac="mimsauto" >
			<arg value="-.P_PROGRAM:${app}" />
			<arg value="-.tracelevel:${trace.level}" />
			<arg value="-.PRIME:false" />
			<arg value="-.UNIX:true" />
			<arg value="-.genos:UNIX" />
			<arg value="-.SUBBATCH:true" />
			<arg value="-.DBSCONNECT:1PC" />
			<arg value="-.HQL" />
			<arg value="-.ELLIPSEJ" />
			<arg value="-.SIDVAR:EDEENV_SID" />
			<arg value="-.DBSMODE:ESQL" />
			<arg value="-.USE_CHAR" />
			<arg value="-.dd:dict.pdf" />
			<arg value="-.BUSOBJ" />
			<arg value="-.HQL" />
			<arg value="-.UEXDIR:none" />
			<arg value="-.COBOLNAME:MFCOBOL" />
			<arg value="-.ifile:${appfile}" />
			<arg value="-.ofile:${app}.cob" />
		</pcom2>
		<if><equals arg1="${ellipsej.check}" arg2="true" /><then>
			<pcom2 mac="chkauto">
				<arg value="-.INFO" />
				<arg value="-.MIMS3TST_DD:dict.pdf" />
				<arg value="-.COMMAREA" />
				<arg value="-.GOTO" />
				<arg value="-.DBIO" />
				<arg value="-.COM_LST_CNT:-1" />
				<arg value="-.ifile" />
				<arg value="${appfile}" />
			</pcom2>
			<echo file="${check}" append="true" message="${pcom.out}\n" />
		</then></if>
		</try>
		<catch>
			<touch file="${fail}"/>
			<echo file="${fail}" append="true" >${app}
</echo>
		</catch>
		</trycatch>

		<concat destfile="${folder}/${app}.cob" append="true">
			<fileset dir="${folder}" includes="*.cb2" />
		</concat>
		<delete file="${folder}/${app}.cb2" />
		<delete file="${folder}/${app}.rif" failonerror="false" />
		<delete file="${folder}/${app}.sif" failonerror="false" />
	</target>
	<macrodef name="pcom2">
		<attribute name="mac" />
		<element name="args" implicit="yes" />
		<sequential>
			<pcom dir="${folder}" failonerror="true">
				<arg value="-ddir" />
				<arg value="${datdct}" />
				<arg value="-mdirs" />
				<arg value="${macro},${db_macro},${momgen}" />
				<arg value="-srlist" />
				<arg value="${gen.copyfile},${copyfile}" />
				<arg value="-copydirs" />
				<arg value="${copyins},${copymsm},${gen.copyfile},${copyfile},${db_macro}" />
				<arg value="-fd" />
				<arg value="+copyfile,+copymsm,+0,+1,+2,+3,+4,+5,+6,+7,+8,+9,+x,${copymsm}" />
				<arg value="-mac" />
				<arg value="@{mac}" />
				<args />
				<arg value="-auto" />
			</pcom>
		</sequential>
	</macrodef>
	<target name="rdl-all" if="batch">
		<delete dir="${rdl.temp}" />
		<mkdir dir="${rdl.temp}" />
	
		<parallel threadcount="${ellipsej.threads}">
			<rdl.macro hash.fileset.id="0" />
			<rdl.macro hash.fileset.id="1" />
			<rdl.macro hash.fileset.id="2" />
			<rdl.macro hash.fileset.id="3" />
			<rdl.macro hash.fileset.id="4" />
			<rdl.macro hash.fileset.id="5" />
			<rdl.macro hash.fileset.id="6" />
			<rdl.macro hash.fileset.id="7" />
			<rdl.macro hash.fileset.id="8" />
			<rdl.macro hash.fileset.id="9" />
			<rdl.macro hash.fileset.id="x" />
		</parallel>
		
		<!-- is audit RDLs exists, copy into rdl.jar -->
		<mkdir dir="${workspace}/genaudit"/>

		<zip destfile="${dist}/rdl.jar">
			<zipfileset dir="${rdl.dir}" prefix="com/mincom/ellipse/rdl" includes="*.rdl" />
			<zipfileset dir="${workspace}/genaudit" prefix="com/mincom/ellipse/rdl" includes="*.rdl" />
		</zip>
	</target>

	<macrodef name="rdl.macro" >
		<attribute name="hash.fileset.id" />
		<sequential>
			<foreach target="rdl" param="rdlappfile">
				<fileset refid="rdl.@{hash.fileset.id}.subset" />
			</foreach>
		</sequential>
	</macrodef>

	<target name="rdl">
		<basename property="rdltmp" file="${rdlappfile}" />
		<propertyregex property="app" input="${rdltmp}" regexp="(.*?)\.rdl" replace="\1" />
		<propertyregex property="appdir" input="${rdltmp}" regexp="(.*?)(.)(..)\.rdl" replace="\2" />
		<echo message="RDL ${app}" />
		<echo message="RDL Directory ${appdir}" />
		<!-- NOTE: Order IS important for pcom -->
		<delete file="${rdl.temp}/${appdir}/${app}.cbl" />
		<copy file="${rdlappfile}" todir="${rdl.temp}/${appdir}" />
		<pcom dir="${rdl.temp}/${appdir}">
			<arg value="-ddir" />
			<arg value="${datdct}" />
			<arg value="-.dd:dict.pdf" />
			<arg value="-mdirs" />
			<arg value="${macro},${db_macro},${momgen}" />
			<arg value="-mac" />
			<arg value="rptauto,mimsargl" />
			<arg value="-copydirs" />
			<arg value="${copyins},${copymsm},${gen.copyfile},${copyfile},${db_macro}" />
			<arg value="-srlist" />
			<arg value="${gen.copyfile},${copyfile}" />
			<arg value="-.tracelevel:${trace.level}" />
			<arg value="-.UNIX:true" />
			<arg value="-.BUSOBJ" />
			<arg value="-.CURR_VERSION:uncontrolled" />
			<arg value="-.program:${app}" />
			<arg value="-auto" />
		</pcom>

		<delete file="${rdl.temp}/${appdir}/${rdltmp}" />
		<antcall target="pcom">
			<param name="appfile" value="${rdl.temp}/${appdir}/${app}.cbl" />
		</antcall>
	</target>
	<target name="dumpload-all" if="include.dumpload">
		<delete dir="${dumpload}" />
		<mkdir dir="${dumpload}" />
		<foreach target="dumpload" param="appfile">
			<fileset refid="dumpload.fileset" />
		</foreach>
		<foreach target="pcom" param="appfile">
			<fileset dir="${dumpload}">
				<include name="*.cbl" />
			</fileset>
		</foreach>
	</target>
	<target name="dumpload">
		<antcall target="dumpload2">
			<param name="type" value="DUMP" />
		</antcall>
		<antcall target="dumpload2">
			<param name="type" value="LOAD" />
		</antcall>
	</target>
	<target name="dumpload2">
		<basename property="apptmp" file="${appfile}" />
		<propertyregex property="app" input="${apptmp}" regexp="(.*?)\.ddf" replace="\1" />
		<exec dir="${dumpload}" executable="${pcom}" outputproperty="pcom.err">
			<arg value="-srlist" />
			<arg value="${gen.copyfile},${copyfile}" />
			<arg value="-fd" />
			<arg value="+copyfile,+copymsm,+0,+1,+2,+3,+4,+5,+6,+7,+8,+9,+x,${copymsm}" />
			<arg value="-mdirs" />
			<arg value="${macro},${db_macro},${momgen}" />
			<arg value="-mac" />
			<arg value="dumpload" />
			<arg value="-.dd:${datdct}/dict.pdf" />
			<arg value="-.user:Mincom" />
			<arg value="-.file:${app}" />
			<arg value="-.surname:Mincom" />
			<arg value="-.options:MINCOM/MS/${type}/3001" />
			<arg value="-ofile" />
			<arg value="${dumpload}/" />
			<arg value="-auto" />
		</exec>
	</target>
	<target name="exit.remover">
		<if>
			<and>
				<available file="${build}/5/msk546.cob" />
				<equals arg1="${naca.reduce}" arg2="false" />
			</and>
			<then>
				<echo message="Removing msk546 exits" />
				<java classpath="${Tools}/bin" classname="com.mincom.ellipsej.tools.ExitRemover" fork="true" maxmemory="${javac.memory}">
					<arg value="${build}/5/msk546.cob" />
				</java>
			</then>
		</if>
	</target>
	<target name="naca" unless="skip.naca">
		<parallel threadcount="${ellipsej.threads}">
			<naca hash="0" />
			<naca hash="1" />
			<naca hash="2" />
			<naca hash="3" />
			<naca hash="4" />
			<naca hash="5" />
			<naca hash="6" />
			<naca hash="7" />
			<naca hash="8" />
			<naca hash="9" />
			<naca hash="x" />
		</parallel>
		<!-- Remove the Mssskl linkage area file to not clash with our EJP version -->
		<delete>
			<fileset dir="${src}" includes="**/Msssklws_ins.java" />
		</delete>
	</target>
	<macrodef name="naca">
		<attribute name="hash" />
		<sequential>
		<java classname="NacaCompile" fork="true" maxmemory="${javac.memory}" failonerror="false" dir="${workspace}">
			<arg value="${build}/@{hash}" />
			<arg value="${src}" />
			<arg value="${copymsm}|${copylib}|${gen.copyfile}/0|${gen.copyfile}/1|${gen.copyfile}/2|${gen.copyfile}/3|${gen.copyfile}/4|${gen.copyfile}/5|${gen.copyfile}/6|${gen.copyfile}/7|${gen.copyfile}/8|${gen.copyfile}/9|${gen.copyfile}/x|${copyfile}/0|${copyfile}/1|${copyfile}/2|${copyfile}/3|${copyfile}/4|${copyfile}/5|${copyfile}/6|${copyfile}/7|${copyfile}/8|${copyfile}/9|${copyfile}/x" />
			<classpath>
				<pathelement location="${lib.dir}/JLib.jar" />
				<pathelement location="${lib.dir}/NacaTrans.jar" />
				<pathelement location="${lib.dir}/MincomNacaTrans.jar" />
			</classpath>
			<jvmarg value="-Dnaca.reduce=${naca.reduce}" />
		</java>
		</sequential>
	</macrodef>
	<target name="javac" unless="skip.compile">
		<javacbatch includes="**/*.java" srcdir="${src}" destdir="${bin}" memoryinitialsize="${javac.memory}" memorymaximumsize="${javac.memory}" fork="true" debug="true" debuglevel="lines,vars,source" range="${batch.range}">
			<classpath>
				<pathelement location="${lib.dir}/ejp.jar" />
				<pathelement location="${lib.dir}/NacaRT.jar" />
			</classpath>
		</javacbatch>
	</target>
	<target name="tools">
		<mkdir dir="${Tools}/bin" />
		<javac srcdir="${Tools}/src" destdir="${Tools}/bin" />
	</target>
	<target name="jarxml">
		<jar destfile="${dist}/${ellipsej-xml.jar}" basedir="${base}" includes="xml/**" />
	</target>
	<target name="scrngen" unless="skip.xml">
		<mkdir dir="${ScrngenXML}/bin" />
		<javac srcdir="${ScrngenXML}/src" destdir="${ScrngenXML}/bin" debug="true" />
		<delete dir="${xmloutput}" />
		<mkdir dir="${xmloutput}" />
		<java classname="ScrngenXML" fork="true">
			<arg value="-t" />
			<arg value="TUXEDO" />
			<arg value="-o" />
			<arg value="${xmloutput}" />
			<arg value="-x" />
			<arg value="${xml}" />
			<classpath>
				<pathelement location="${ScrngenXML}/bin" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>
	<target name="lsi">
		<property name="exlib" value="lib2" />
		
		<if>
			<equals arg1="${ivy.cache}" arg2="$${env.WORKSPACE}/ivy.cache"/>
			<then>
				<propertyregex property="ivy.cache" input="${basedir}/../../../ivy.cache" 
						regexp="(.*)" select="\0" override="true"/>
				<echo message="~ Lost Hudson environment variable detected ~"/>
				<echo message="$${ivy.cache} = ${ivy.cache}"/>
			</then>
		</if>
		<ivy:settings file="${ivy.settings}" />
		
		<ivy:retrieve organisation="mincom.external" module="slf4j" revision="${infrastructure.version}" inline="true" pattern="${exlib}/[artifact].[type]" />
		<ivy:retrieve organisation="mincom.external" module="gnu-regexp" revision="${infrastructure.version}" inline="true" pattern="${exlib}/[artifact].[type]" />
		<ivy:retrieve organisation="mincom.internal" module="ejlib" revision="${infrastructure.version}" inline="true" pattern="${exlib}/[artifact].[type]" />
		<ivy:retrieve organisation="mincom" module="esbi-ellipsej-core" revision="${infrastructure.version}" inline="true" pattern="${lib.dir}/[artifact].[type]" />
		<ivy:retrieve organisation="mincom" module="esbi-ellipsej-generator" revision="${infrastructure.version}" inline="true" pattern="${lib.dir}/[artifact].[type]" />
		<ivy:retrieve organisation="mincom" module="lsi-ellipsej-generator" revision="${infrastructure.version}" inline="true" pattern="${lib.dir}/[artifact].[type]" />
		<trycatch>
			<try>
				<lsi momgen="${momgen}" lib="${lib.dir}" dest="${dist}" />
				<esbi momgen="${momgen}" lib="${lib.dir}" dest="${dist}" exlib="${exlib}" />
				<property name="gendd.macro" value="${basedir}" />
				<eroi dbmacro="${gendd.macro}" lib="${lib.dir}" dest="${dist}" src="${cobol.src}" ellipse="${base}" gen.copyfile.dir="${workspace}" />
			</try>
			<finally>
				<delete dir="${intermediate}" />
				<delete dir="${exlib}" />
			</finally>
		</trycatch>
	</target>
</project>


